const fs = require('fs');
const path = require('path');

// ◊ß◊ë◊ô◊¢◊™ ◊†◊™◊ô◊ë ◊î◊ì◊ò◊î ◊ë◊ô◊ô◊°
const databasePath = process.env.DATABASE_PATH || path.join(__dirname, 'database.sqlite');
const backupDir = path.join(__dirname, 'backups');

console.log('üîÑ Starting database backup...');
console.log(`üìÑ Source database: ${databasePath}`);
console.log(`üìÅ Backup directory: ${backupDir}`);

// ◊ë◊ì◊ô◊ß◊î ◊ê◊ù ◊ß◊ï◊ë◊• ◊î◊ì◊ò◊î ◊ë◊ô◊ô◊° ◊ß◊ô◊ô◊ù
if (!fs.existsSync(databasePath)) {
  console.error('‚ùå Database file not found!');
  console.error(`üîç Expected path: ${databasePath}`);
  process.exit(1);
}

// ◊ô◊¶◊ô◊®◊™ ◊™◊ô◊ß◊ô◊ô◊™ ◊í◊ô◊ë◊ï◊ô ◊ê◊ù ◊ú◊ê ◊ß◊ô◊ô◊û◊™
if (!fs.existsSync(backupDir)) {
  try {
    fs.mkdirSync(backupDir, { recursive: true });
    console.log(`‚úÖ Created backup directory: ${backupDir}`);
  } catch (error) {
    console.error(`‚ùå Failed to create backup directory: ${error.message}`);
    process.exit(1);
  }
}

// ◊ô◊¶◊ô◊®◊™ ◊©◊ù ◊ß◊ï◊ë◊• ◊î◊í◊ô◊ë◊ï◊ô ◊¢◊ù ◊™◊ê◊®◊ô◊ö ◊ï◊©◊¢◊î
const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
const backupFileName = `database-backup-${timestamp}.sqlite`;
const backupPath = path.join(backupDir, backupFileName);

try {
  // ◊î◊¢◊™◊ß◊™ ◊ß◊ï◊ë◊• ◊î◊ì◊ò◊î ◊ë◊ô◊ô◊°
  fs.copyFileSync(databasePath, backupPath);
  
  // ◊ë◊ì◊ô◊ß◊™ ◊î◊ß◊ï◊ë◊• ◊î◊û◊ï◊¢◊™◊ß
  const sourceStats = fs.statSync(databasePath);
  const backupStats = fs.statSync(backupPath);
  
  console.log('‚úÖ Database backup completed successfully!');
  console.log(`üìÑ Backup file: ${backupFileName}`);
  console.log(`üìä Original size: ${sourceStats.size} bytes`);
  console.log(`üìä Backup size: ${backupStats.size} bytes`);
  console.log(`üìÖ Backup created: ${backupStats.birthtime}`);
  
  // ◊î◊¶◊í◊™ ◊®◊©◊ô◊û◊™ ◊õ◊ú ◊î◊í◊ô◊ë◊ï◊ô◊ô◊ù
  const backupFiles = fs.readdirSync(backupDir)
    .filter(file => file.endsWith('.sqlite'))
    .sort()
    .reverse();
  
  console.log(`üìã Total backups: ${backupFiles.length}`);
  if (backupFiles.length > 0) {
    console.log('üìã Recent backups:');
    backupFiles.slice(0, 5).forEach(file => {
      const filePath = path.join(backupDir, file);
      const stats = fs.statSync(filePath);
      console.log(`   ${file} (${stats.size} bytes, ${stats.birthtime.toISOString()})`);
    });
  }
  
} catch (error) {
  console.error('‚ùå Backup failed:', error.message);
  process.exit(1);
} 
} 